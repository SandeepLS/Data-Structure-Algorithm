/*
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]
 
Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
*/
Ex:-
var topKFrequent = function(nums, k) {
    let map = {};

    for(let num of nums){
        if(!map[num]) map[num] = 0;
        map[num]++;
    }
    return [...Object.keys(map)].sort((a,b) => map[b]- map[a]).slice(0,k)
};
/**
[1,1,1,2,2,3], k = 2

{
    1:3,
    2:2,
    3:1
}

Ans: [1,2,3].slice(0,2) = [1,2]
//Create the map
//then fill the map
    if map doesn't have the key, then we are going to create that key, then initialy equal to 0.
    Increment the value of key, everytime encounterd it.

//once find the frequency, we sort the map
converted into array of keys, then those keys sorted based on the values. sorted in desending order sort((a,b) => map[b] - map[a])
slice(0,k).

 */
-------------------------------------------------------------------------------------------------------------
var topKFrequent = function(nums, k) {
    // Create an empty object to store frequency counts of numbers
    let map = {};

    // Iterate through each number in the input array
    for (let num of nums) {
        // Check if the number is already present in the map
        if (!map[num]) {
            // If not, initialize its count as 0
            map[num] = 0;
        }
        // Increment the count of the number
        map[num]++;
    }
    
    // Convert the keys of the map (unique numbers) to an array,
    // then sort the array based on the frequency count of each number
    // in descending order and slice the first k elements
    return [...Object.keys(map)].sort((a, b) => map[b] - map[a]).slice(0, k);
};
const result = mostFrequent([1, 1, 1, 2, 2, 3], 2);
console.log(result);

/*return [...Object.keys(map)].sort((a, b) => map[b] - map[a]).slice(0, k);: After counting the frequency of each number, 
this line converts the keys of the map object (which are the unique numbers) to an array using Object.keys(map). 
Then, it sorts the array based on the frequency count of each number in descending order using a custom comparator function (a, b) => map[b] - map[a].
Finally, it slices the sorted array to return the first k elements, which represent the k most frequently occurring elements in the input array.
*/
