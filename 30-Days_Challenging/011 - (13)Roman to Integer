Example:-
function romanToInt(s) {
    // Step 1: Define a map for Roman numerals and their values
    const romanMap = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    };

    let total = 0; // Final integer result
    let prevValue = 0; // To store the previous Roman numeral's value

    // Step 2: Iterate through the string from right to left
    for (let i = s.length - 1; i >= 0; i--) {
        const currentValue = romanMap[s[i]]; // Get the integer value of the current Roman numeral

        // Step 3: Determine whether to add or subtract the value
        if (currentValue >= prevValue) {
            total += currentValue; // Add the value if it's greater or equal to the previous value
        } else {
            total -= currentValue; // Subtract the value if it's smaller than the previous value
        }

        // Update the previous value for the next iteration
        prevValue = currentValue;
    }

    return total;
}

// Example Usage
console.log(romanToInt("III")); // Output: 3
console.log(romanToInt("LVIII")); // Output: 58
console.log(romanToInt("MCMXCIV")); // Output: 1994


/**
Roman to Integer:-
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two ones added together.
12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead,
the number four is written as IV. Because the one is before the five we subtract it making four. 
The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
> I can be placed before V (5) and X (10) to make 4 and 9. 
> X can be placed before L (50) and C (100) to make 40 and 90. 
> C can be placed before D (500) and M (1000) to make 400 and 900.

Example 1:
Input: s = "III"
Output: 3
Explanation: III = 3.

Example 2:
Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.

Example 3:
Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

----------------------------------------------------------------------------------------
This problem uses a hash map (object in JavaScript) to store the values of Roman numerals and facilitate quick lookup during iteration. 

Workflow of Execution
1. Initialize the Map:
   The map romanMap stores the Roman numerals and their integer values for fast lookup.

2. Iterate from Right to Left:
   Start from the last character in the string and move towards the beginning.
   This approach ensures that smaller numerals preceding larger ones (like "IV") can be handled correctly by subtraction.

3. Add or Subtract:
   If the current numeral's value is greater than or equal to the previous numeral's value, add it to total.
   Otherwise, subtract it (for cases like "IV" or "IX").

4. Update prevValue:
   After processing a numeral, update prevValue to the current numeral's value.

5. Return the Result:
   After the loop, the variable total contains the integer equivalent of the Roman numeral.

Example Walkthrough
Input: s = "MCMXCIV"
1. Start from the right:
   prev Value = 0, total = 0
2. Process each character:
   IV : total = 4
   XC : total = 94
   CM : total = 994
    M : total = 1994


Time Complexity
  > Lookup Operation: O(1) per character due to the hash map.
  > Iteration: O(n), where n is the length of the string.
  Overall: O(n).

Space Complexity
  > The hash map uses O(1) space as it contains a fixed number of keys (7 Roman numerals).
  > Additional variables total and prevValue use O(1) space.
  Overall: O(1).
**/
