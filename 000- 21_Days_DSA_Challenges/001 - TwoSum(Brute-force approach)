Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Ex:-
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */

 /**
 (a)
 nums = [1,5,9]
 target = 10 
 [0,2]

 i=0
 j=5
 1+5 = 10(No)

 i=0
 j=9
 1+9 = 10(yes)

 time complexity= O(N^2) => O(N)
 Space complexity= O(1) = ther is no extra memory, constant. => O(N)
*/

const twoSum = function(nums, target){
    for(let i=0;i<nums.length;i++){
      for(let j=i+1;j<nums.length;j++){
        if(nums[i] + nums[j] == target){
          return [i, j];
        }
      }
    }
    return false;
  }
  const res = twoSum([1,2,3,4], 5);
  console.log(res);   //[ 0, 3 ]  //TimeComplexity = O(n2).

/*
The solution we implemented is a brute-force approach. In this method,
we are using two nested loops to check all possible pairs of numbers in the array to see if they add up to the target value.
This approach is straightforward but not the most efficient for large inputs, as it has a time complexity of O(n²),
where n is the number of elements in the array.

Here’s a breakdown of the brute-force method:
  Outer loop (i): Iterates through each element in the array.
  Inner loop (j): Iterates through the elements after i to check if any pair of numbers adds up to the target.
  Check condition: If nums[i] + nums[j] === target, it returns the indices [i, j].

This solution works, but it could be optimized using a hash map (or object) to achieve a better time complexity of O(n). 
Would you like to see an optimized solution?
*/
