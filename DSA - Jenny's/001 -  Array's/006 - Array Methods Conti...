16) reverse():- Reverses the elements in an array.
    The reverse() method reverses the order of elements in the array in place, 
    meaning it modifies the original array rather than creating a new one.
    const arr = [1, 2, 3];
    arr.reverse();
    console.log(arr); // Output: [3, 2, 1]
    
    Time Complexity: O(n)
    The method swaps elements from the beginning and the end of the array, moving toward the middle.
    
    Space Complexity: O(1)
    Since the reversal happens in place (i.e., no new array is created), the space usage is constant, regardless of the array size.

17) join()
    Joins all elements into a string with a specified separator.
    const arr = [1, 2, 3];
    const joined = arr.join("-");
    console.log(joined); // Output: "1-2-3"
    
    Explaination:
    > The join() method takes a separator, in this case, the hyphen "-".
    > It converts each element in the array into a string if it isn’t already a string.
    [1, 2, 3] becomes ["1", "2", "3"].
    > Then, it combines these strings into one single string, placing the separator "-" between each element.
    Result: "1-2-3"
    
    Time Complexity:
    The join() method has to traverse the entire array once to convert each element to a string and concatenate them.
    The time complexity is O(n * m), where:
    n: Number of elements in the array.
    m: Average length of string conversion or the separator.
    
    Space Complexity:
    > A new string is created that contains all the elements of the array, plus the separators.
    > The space complexity is O(k), where: 𝑘
    k: Total length of the resulting string, which includes all element lengths and the separators.

    Example: 
    const arr = [10, 20, 30];
    const joinedWithComma = arr.join(",");   // "10,20,30" (default separator is a comma)
    const joinedWithSpace = arr.join(" ");  // "10 20 30"
    const joinedWithoutSeparator = arr.join(""); // "102030"
    
    console.log(joinedWithComma);    // Output: "10,20,30"
    console.log(joinedWithSpace);    // Output: "10 20 30"
    console.log(joinedWithoutSeparator); // Output: "102030"
    
18) indexOf()
    It Returns the first index, of a specified value.
    const arr = [1, 2, 3, 2];
    console.log(arr.indexOf(1)); //: 0
    console.log(arr.indexOf(2)); //: 1(firstIndex)
    console.log(arr.indexOf(3)); //: 2
    console.log(arr.indexOf(2)); //: 1(firstIndex)
    console.log(arr.indexOf(4)); // Output: -1(If the value is not present)
    
    Time Complexity:
    Worst-case: O(n), where n is the length of the array.
    > This is because indexOf() iterates through the array from the start until it finds the element or reaches the end.
    > For example, if the element is not present, it will check all n elements.
    
    Space Complexity:
    Space: O(1).
    indexOf() does not use any extra memory; it only operates on the input array.
    

19) lastIndexOf()
    Returns the last index, of a specified value.
    const arr = [1, 2, 3, 2];
    console.log(arr.lastIndexOf(1)); //: 0
    console.log(arr.lastIndexOf(2)); //: 3(lastIndex)
    console.log(arr.lastIndexOf(3)); //: 2
    console.log(arr.lastIndexOf(2)); //: 3(lastIndex)
    
    Time Complexity:
    Worst-case: O(n), where n is the length of the array.
    > The method may need to traverse the entire array if the specified value is at the beginning or does not exist.
    
    Space Complexity:
    Space: O(1)
    > No extra memory is allocated as it only traverses the array in-place without creating new structures.

20) flat()
    Flattens nested arrays.
    const arr = [1, [2, [3, 4]], 5];
    const flatArr = arr.flat(2);
    console.log(flatArr); // Output: [1, 2, 3, 4, 5]
