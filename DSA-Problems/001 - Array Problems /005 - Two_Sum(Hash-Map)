var twoSum = function(nums, target) {
    const map = {}; // Create a hash map to store indices of numbers
    
    for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i]; // Calculate the complement
        
        // Check if the complement exists in the map
        if (complement in map) {
            return [map[complement], i]; // Return indices if found
        }
        
        // Store the current number and its index in the map
        map[nums[i]] = i;
    }
    
    return false; // In case no solution is found (though the problem guarantees a solution)
};

const res = twoSum([1, 2, 3, 4], 7);
console.log(res);  // [2, 3]

/*
Explanation:
Hash map: This stores each number as the key and its index as the value.
Complement: For each number, calculate the complement (target - nums[i]).
Check complement: Look up the complement in the hash map. If it's found, return the indices of the complement and the current number.
Update map: If the complement is not found, add the current number and its index to the map for future reference.

Example Walkthrough (corrected):
For nums = [1, 2, 3, 4] and target = 7:
When i = 0, nums[0] = 1, and complement = 7 - 1 = 6. It’s not in the map, so we add { 1: 0 } to the map.
When i = 1, nums[1] = 2, and complement = 7 - 2 = 5. It’s not in the map, so we add { 1: 0, 2: 1 }.
When i = 2, nums[2] = 3, and complement = 7 - 3 = 4. It’s not in the map yet, so we add { 1: 0, 2: 1, 3: 2 }.
When i = 3, nums[3] = 4, and complement = 7 - 4 = 3. 3 is in the map (at index 2), so return [2, 3].

When i = 2, nums[2] = 3, and complement = 7 - 3 = 4. At this point,
we haven't checked for the complement yet, and 4 is not yet in the map, 
so we proceed by adding 3 to the map. The corrected map after this step would be:
{
  1: 0,
  2: 1,
  3: 2
}

Example Walkthrough:
1. i = 0, value = 1
   complement_pair = 7 - 1 = 6
    > 6 is not in the map.
    > Add {1: 0} to the map.
    > Current map: {1: 0}

2. i = 1, value = 2
   complement_pair = 7 - 2 = 5
    > 5 is not in the map.
    > Add {2: 1} to the map.
    > Current map: {1: 0, 2: 1}

3. i = 2, value = 3
   complement_pair = 7 - 3 = 4
    > 4 is not in the map.
    > Add {3: 2} to the map.
    > Current map: {1: 0, 2: 1, 3: 2}

4. i = 3, value = 4
   complement_pair = 7 - 4 = 3
    > 3 is in the map (at index 2).
    > Return [2, 3].
*/

----------------------------------------------------------------------------------------------
Time Complexity:-
> Single Iteration: The function iterates through the array once, so it takes O(n) time, where  n is the length of the array.
> Hash Map Operations: Checking if the complement exists in the hash map: O(1) on average.
  Inserting a value into the hash map: O(1) on average.
  Thus, the time complexity of the entire function is: O(n)

Space Complexity
Hash Map Storage:
  The hash map stores up to n elements, where n is the length of the array.
  Each entry in the hash map takes O(1) space, so the total space used is O(n).
  Thus, the space complexity is: O(n)
