// 1st Approach: Solution Using Character Sum
var findTheDifference = function(s, t) {
    let sumS = 0, sumT = 0;

    // It iterates over the values of an iterable object(Array/String/Map)
    for (let char of s) {
        sumS += char.charCodeAt(0); // Sum ASCII values of characters in s
    }
    
    for (let char of t) {
        sumT += char.charCodeAt(0); // Sum ASCII values of characters in t
    }
    
    return String.fromCharCode(sumT - sumS); // Extra character's ASCII
};

console.log(findTheDifference("abcd", "abcde")); // Output: "e"
console.log(findTheDifference("", "y")); // Output: "y"

--------------------------------------------------------------
// 2nd Approach: Using Frequency Count (Hashmap)
var findTheDifference = function(s, t) {
    const charCount = {};

    // Count characters in s
    for (let char of s) {
        charCount[char] = (charCount[char] || 0) + 1;
    }

    // Check characters in t
    for (let char of t) {
        if (!charCount[char] || charCount[char] === 0) {
            return char; // Found the extra character
        }
        charCount[char]--;
    }
};

// Example Usage
console.log(findTheDifference("abcd", "abcde")); // Output: "e"
console.log(findTheDifference("", "y")); // Output: "y"

Time Complexity: O(n)
Space Complexity: O(1)

/*
Find the Difference:-
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"
*/
/*
Solution:-
This problem involves strings and focuses on character manipulation. 
The core idea is to find the difference between the two strings, 
which can be efficiently handled using a hashmap, array, or character-based arithmetic.

Approach 1: Using Character Sum (Arithmetic)
Sum ASCII Values:
   > Calculate the sum of ASCII values of all characters in t and s.
   > Subtract the sum of s from t to get the ASCII value of the extra character.

What are ASCII Values?
ASCII stands for American Standard Code for Information Interchange. It is a character encoding standard that assigns a unique numeric value to each character, including:
> Letters (a to z, A to Z),
> Digits (0 to 9),
> Special symbols (e.g., !, @, #),
> Control characters (e.g., newline \n, tab \t).

How Does ASCII Work?
Each character is assigned a numeric value called the ASCII value.
These values range from 0 to 127 for standard ASCII.
For example:
'a' has an ASCII value of 97.
'A' has an ASCII value of 65.
'1' has an ASCII value of 49.
Space ' ' has an ASCII value of 32

How to Use ASCII Values in Programming
In programming, you can use the ASCII value of a character:
> Convert a character to its ASCII value using charCodeAt() in JavaScript.
> Convert an ASCII value back to a character using String.fromCharCode().

Example - 1:- Converting Character to ASCII
const char = 'a';
const asciiValue = char.charCodeAt(0); // Get ASCII value of 'a'
console.log(asciiValue); // Output: 97

Example - 2:- Converting ASCII to Character
const asciiValue = 97;
const char = String.fromCharCode(asciiValue); // Convert 97 to character
console.log(char); // Output: "a"

Example - 3:- Sum of ASCII Values in a String
function sumOfAsciiValues(str) {
    let sum = 0;
    for (let char of str) {
        sum += char.charCodeAt(0); // Add ASCII value of each character
    }
    return sum;
}
console.log(sumOfAsciiValues("abcd")); // Output: 97 + 98 + 99 + 100 = 394
console.log(sumOfAsciiValues("ABC"));  // Output: 65 + 66 + 67 = 198

----------------------
Approach 1: Using Character Frequency Count (Hashmap)
1. Count Frequencies:
    Traverse through string s and count the frequency of each character.
    Traverse through string t and decrease the frequency count.
2. Identify the Extra Character:
    The character with a negative or unmatched count in t is the added character.
*/
