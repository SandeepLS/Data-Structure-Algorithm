/*
Given an array of strings strs, group the anagrams together. You can return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:
Input: strs = [""]
Output: [[""]]

Example 3:
Input: strs = ["a"]
Output: [["a"]]
 

Constraints:
1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.
*/

Ex:-
var groupAnagrams = function(strs) {
   // Create a Map to store anagrams
   const anagramsMap = new Map();
   
   // Iterate through each string in the input array
   for (const str of strs) {
       // Sort the characters of the current string and join them back into a string
       const sortedStr = str.split('').sort().join('');
       
       // Check if the sorted string is already a key in the map
       if (!anagramsMap.has(sortedStr)) {
           // If not, initialize its value as an empty array
           anagramsMap.set(sortedStr, []);
       }
       
       // Push the original string into the array associated with the sorted string
       anagramsMap.get(sortedStr).push(str);
   }
   
   // Return an array containing the values (arrays of anagrams) from the map
   return Array.from(anagramsMap.values());
};
const strs = ["eat","tea","tan","ate","nat","bat"];
const result = groupAnagrams(strs);
console.log(result);
