// Example implementation of isBadVersion API
const isBadVersion = function (version) {
    const firstBadVersion = 4; // Let's assume version 4 is the first bad version
    return version >= firstBadVersion;
};

// Define findFirstBadVersion function
function findFirstBadVersion(isBadVersion) {
    return function (n) {
        let left = 1;
        let right = n;

        while (left < right) {
            const mid = Math.floor(left + (right - left) / 2);

            if (isBadVersion(mid)) {
                // If mid is bad, search the left half
                right = mid;
            } else {
                // If mid is good, search the right half
                left = mid + 1;
            }
        }

        // At the end, left == right and points to the first bad version
        return left;
    };
}

// Create the curried function
const findFirstBadVersionCurried = findFirstBadVersion(isBadVersion);

// Call the function with n = 5
const n = 5;
console.log(findFirstBadVersionCurried(n)); // Output: 4

/**
First Bad Version:-
You are a product manager and currently leading a team to develop a new product. Unfortunately, 
the latest version of your product fails the quality check. 
Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad.
Implement a function to find the first bad version. You should minimize the number of calls to the API.

Example 1:
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.

Example 2:
Input: n = 1, bad = 1
Output: 1
---------------------------------
Workflow of Execution:-
Example 1: n=5, bad=4

1. Initialization:
   left=1, right=5.
2. Binary Search Loop:
Iteration 1:
  > mid=Math.floor(1+(5−1)/2)=3
  > Call isBadVersion(3): Returns false
  > Since 3 is not bad, set left=4

Iteration 2:
  > mid=Math.floor(4+(5−4)/2)=4.
  > Call isBadVersion(4): Returns true.
  > Since 4 is bad, set right=4

3. Exit Loop:
   left=right=4.
4. Result:
   Return 4, the first bad version.

Time Complexity: O(logn)
Space Complexity: O(1)
**/
