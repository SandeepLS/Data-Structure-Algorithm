var largestPerimeter = function(nums) {
    // Step 1: Sort the array in descending order
    nums.sort((a, b) => b - a);

    // Step 2: Iterate through the sorted array
    for (let i = 0; i < nums.length - 2; i++) {

        // Check the triangle inequality: a + b > c
        if (nums[i] < nums[i + 1] + nums[i + 2]) {
            // Return the perimeter of the triangle
            return nums[i] + nums[i + 1] + nums[i + 2];
        }
    }

    // If no valid triangle is found, return 0
    return 0;
};

// Example Usage
console.log(largestPerimeter([2, 1, 2])); // Output: 5
console.log(largestPerimeter([1, 2, 1, 10])); // Output: 0


/**
Largest Perimeter Triangle:-
Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, 
formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.

Example 1:
Input: nums = [2,1,2]
Output: 5
Explanation: You can form a triangle with three side lengths: 1, 2, and 2.

Example 2:
Input: nums = [1,2,1,10]
Output: 0
Explanation: 
You cannot use the side lengths 1, 1, and 2 to form a triangle.
You cannot use the side lengths 1, 1, and 10 to form a triangle.
You cannot use the side lengths 1, 2, and 10 to form a triangle.
As we cannot use any three side lengths to form a triangle of non-zero area, we return 0.
---------------------------------------------------------------------------------------
Problem Type:-
The problem involves an array data structure where you need to identify three numbers satisfying the triangle inequality:
  > The sum of any two sides must be greater than the third side for a valid triangle.

Solution in JavaScript
The solution involves:
  1. Sorting the array in descending order.
  2. Iterating through the sorted array to find the largest valid triangle perimeter.
Here is the solution:

Workflow of Execution
1. Input Array:
   Example: nums = [2, 1, 2].
2. Step 1: Sort the Array (Descending):
   Use nums.sort((a, b) => b - a) to sort the array.
   Sorted Array: [2, 2, 1].
3. Step 2: Iterate and Check Triangle Inequality:
    For each triplet (a,b,c), check if a<b+c:
    > Triplet: (2,2,1).
    > Check: 2<2+1 â†’ True.
    > Return Perimeter: 2+2+1=5.

    a=nums[i] (largest side),
    b=nums[i+1] (second largest side),
    c=nums[i+2] (smallest side).
    
    Check Example
    For nums=[2,2,1], the sorted sides are:
    > a=2,
    > b=2,
    > c=1.
    
    We check:
    2 < 2 + 1 => 2 < 3 => True(valid triangle

4. Step 3: No Valid Triangle:
   If no triplet satisfies the inequality, return 0.
-------------------------------------------------------------------------------
Time Complexity: O(n log n)
  1. Sorting: Sorting the array takes O(nlogn), where n is the length of the array.
  2. Iterating: Iterating through the array takes O(n).

Space Complexity:
  1. Sorting is done in-place, so no additional space is used. Space Complexity: O(1).
**/
