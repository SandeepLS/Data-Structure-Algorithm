1)push(): Adds one or more elements to the end of an array.
  const arr = [1, 2, 3];
  arr.push(4);
  console.log(arr); // Output: [1, 2, 3, 4]

  Time Complexity:
    > Best Case / Average Case: O(1)
    > Worst Case: O(n)
  Space Complexity: O(1)

2)pop(): Removes the last element from an array and returns it.
  const arr = [1, 2, 3];
  const removedElement = arr.pop();
  console.log(arr); // Output: [1, 2]
  console.log(removedElement); // Output: 3  //T&S: O(1) & O(1)

3)shift(): Removes the first element from an array and returns it.
  const arr = [1, 2, 3];
  const removedElement = arr.shift();
  console.log(arr); // Output: [2, 3]
  console.log(removedElement); // Output: 1  //T&S: O(n) & O(1) 

4)unshift(): Adds one or more elements to the beginning of an array.
  const arr = [2, 3];
  arr.unshift(1);
  console.log(arr); // Output: [1, 2, 3]

  Time Complexity of unshift():
  Worst Case: O(n), where 𝑛 is the number of elements in the array.
  > This is because every element in the array must be shifted one position to the right.
  > Example: For an array [a, b, c], when you unshift(x), the array becomes [x, a, b, c].
    Each of the elements a, b, and c is moved to a new index.
  
  Space Complexity of unshift():
  Space Complexity: O(1), because no additional memory is allocated; the operation is performed in-place within the array.

5)slice():
  is used to extract a portion of an array, and returns it as a new array, without modifying the original array.
  creates a shallow copy of the selected portion.
  The slice() method returns selected elements in an array, as a new array.
  Ex:
  const arr = [1, 2, 3, 4, 5];
  const sliced = arr.slice(1, 4);
  console.log(sliced); // Output: [2, 3, 4]
  
  Summary:
  startIndex (1): This is the starting position (inclusive). Elements will be included starting from this index.
  endIndex (4): This is the ending position (exclusive). Elements up to (but not including) this index will be included.
  
  Starts at index 1 (value 2) and includes it.
  Includes the next elements until it reaches index 4 (value 5), but it does not include index

  Time & Space Complexity of slice()
  1. The time complexity of slice() is O(k), where k is the number of elements being sliced.
    > Reason: It iterates through the sliced portion of the array to create a new array.
  2. The space complexity is O(k), where k is the number of elements in the resulting sliced array.
    > Reason: A new array is created to store the sliced elements.

