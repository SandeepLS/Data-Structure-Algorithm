//Find the targeting element(Binary Search)

const roll = [1, 4, 6, 2, 5, 3, 8];
const target = 5;

function binarySearch(arr, target){
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (target === arr[mid]) {
            return mid; // Return the index if the target is found
        } else if (target > arr[mid]) {
            left = mid + 1; // Move to the right half
        } else {
            right = mid - 1; // Move to the left half
        }
    }

    return -1; // Return -1 if the target is not found
}

const sortedRollNo = roll.slice().sort((a, b) => a-b);  //Sorted array

const result = binarySearch(sortedRollNo, target);

console.log("Sorted array:", sortedRollNo);  //Sorted array: [1, 2, 3, 4, 5, 6, 8]
console.log("Index array:",result);    //Index array: 4

--------------------------------------------------------------------------------------------------
/**
-> since binary search requires a sorted array, we sort the rollNo array using Array.prototype.sort() with a comparison function.
-> rollNo.slice(): Creates a shallow copy of the rollNo array.
-> .sort((a, b) => a - b): sorts the copied array in ascending order (from smallest to largest).
    The .sort() method takes a comparison function as an argument.
    The comparison function receives two elements (a and b) at a time and compares them:
    If a - b is negative (i.e., a is smaller than b), a is placed before b.
    If a - b is positive (i.e., a is larger than b), b is placed before a.
    If a - b is zero, their order remains unchanged (they are considered equal).
->
TimeComplexity: O(log n)
Space coplexity: O(n log n)
-----------------------------
Time Complexity
Best case: O(1), when the target is found at the first check.
Average/Worst case: O(logn), since the search range halves after every iteration.
*/

How It Works
Letâ€™s use an example: Input: arr = [1, 3, 5, 7, 9], target = 7
1. Initialization: left = 0, right = 4.
2. First Iteration:
    > mid = Math.floor((0 + 4) / 2) = 2.
    > arr[mid] = 5, which is less than 7.
    > Update left = mid + 1 = 3.

3. Second Iteration:
    > mid = Math.floor((3 + 4) / 2) = 3.
    > arr[mid] = 7, which matches the target.
    > Return mid = 3.
Output: 3 (the index of 7 in the array).
