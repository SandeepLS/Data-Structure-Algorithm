var arraySign = function (nums) {
  let negativeCount = 0;

  for (let num of nums) {
    if (num === 0) {
      return 0; // If any number is 0, the product is 0
    }
    if (num < 0) {
      negativeCount++; // Count the negative numbers
    }
  }

  // Determine the sign based on the count of negative numbers
  return negativeCount % 2 === 0 ? 1 : -1;
};

// Example Usage
console.log(arraySign([-1, -2, -3, -4, 3, 2, 1])); // Output: 1
console.log(arraySign([1, 5, 0, 2, -3])); // Output: 0
console.log(arraySign([-1, 1, -1, 1, -1])); // Output: -1

/**
Sign of the Product of an Array:-
  Example 1:
  Input: nums = [-1,-2,-3,-4,3,2,1]
  Output: 1
  Explanation: The product of all values in the array is 144, and signFunc(144) = 1
  
  Example 2:
  Input: nums = [1,5,0,2,-3]
  Output: 0
  Explanation: The product of all values in the array is 0, and signFunc(0) = 0
  
  Example 3:
  Input: nums = [-1,1,-1,1,-1]
  Output: -1
  Explanation: The product of all values in the array is -1, and signFunc(-1) = -1

The input is an array of integers.

Solution Workflow
1. Initialize Counters:
  A variable negativeCount to track the number of negative numbers.
  Check for any 0 in the array.

2. Iterate Through the Array:
   For each number:
   > If it’s 0, return 0 immediately.
   > If it’s negative, increment the negativeCount.

3. Determine the Sign:
   If negativeCount is even, return 1 (positive product).
   If negativeCount is odd, return -1 (negative product).

Example Outputs
1. Example 1:
  Input: [-1, -2, -3, -4, 3, 2, 1]
  Negative count = 4 (even).
  Output: 1.

2. Example 2:
  Input: [1, 5, 0, 2, -3]
  Contains 0.
  Output: 0.

3. Example 3:
  Input: [-1, 1, -1, 1, -1]
  Negative count = 3 (odd).
  Output: -1.

Walkthrough for Input [-1, -2, -3, -4, 3, 2, 1]
1. Start with negativeCount = 0.
2. Iterate over each element:
    Element: -1 → Negative → Increment negativeCount: negativeCount = 1.
    Element: -2 → Negative → Increment negativeCount: negativeCount = 2.
    Element: -3 → Negative → Increment negativeCount: negativeCount = 3.
    Element: -4 → Negative → Increment negativeCount: negativeCount = 4.
    Element: 3 → Positive → No change to negativeCount.
    Element: 2 → Positive → No change to negativeCount.
    Element: 1 → Positive → No change to negativeCount.
3. Final negativeCount = 4.


Condition: negativeCount % 2 === 0
> This checks if the value of negativeCount is even.
> % is the modulo operator, which returns the remainder when negativeCount is divided by 2.
> If negativeCount % 2 === 0, the number of negative integers is even.
  Even negatives result in a positive product.


Time Complexity:-
Best Case: O(1) (if a 0 is encountered early in the array).
Worst Case: O(n) (traverse the entire array, where n is the length of nums).

Space Complexity:-
O(1) as we are using a constant amount of additional space.
**/
