function maximumSwap(num) {
    const digits = num.toString().split('').map(Number); // Convert number to array of digits
    const lastIndex = Array(10).fill(-1); // Stores the last occurrence of each digit (0-9)

    // Record the last occurrence of each digit
    for (let i = 0; i < digits.length; i++) {
        lastIndex[digits[i]] = i;
    }

    // Traverse the digits and find the first digit that can be swapped
    for (let i = 0; i < digits.length; i++) {
        // Check for a larger digit to swap in descending order
        for (let d = 9; d > digits[i]; d--) {
            if (lastIndex[d] > i) {
                // Swap digits[i] with digits[lastIndex[d]]
                [digits[i], digits[lastIndex[d]]] = [digits[lastIndex[d]], digits[i]];
                return parseInt(digits.join('')); // Return the modified number
            }
        }
    }

    // If no swap is possible, return the original number
    return num;
}

// Example Usage
console.log(maximumSwap(2736)); // Output: 7236
console.log(maximumSwap(9973)); // Output: 9973


/**
Maximum Swap:-
You are given an integer num. You can swap two digits at most once to get the maximum valued number.
Return the maximum valued number you can get.

Example 1:
Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.

Example 2:
Input: num = 9973
Output: 9973
Explanation: No swap.

Code Explain:-
-> const digits = num.toString().split('').map(Number);
  num.toString(): Converts the number into a string.
  Example: If num = 2736, then num.toString() gives "2736".
  
  .split(''): Splits the string into an array of characters.
  Example: "2736".split('') gives ['2', '7', '3', '6'].
  
  .map(Number): Converts each character in the array back into a number.
  Example: ['2', '7', '3', '6'].map(Number) gives [2, 7, 3, 6].

-> const lastIndex = Array(10).fill(-1);
    Array(10): Creates an array with 10 elements (for digits 0 to 9).
    .fill(-1): Fills the array with -1 as the initial value.
    Example: Array(10).fill(-1) gives [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1].
    
    We use this array to record the last position (index) of each digit in the digits array.
    Initially, all positions are set to -1 because we haven't processed the digits yet.
    Example of How It Works:
    Suppose digits = [2, 7, 3, 6].
    > Start iterating through the digits array.
    > For each digit, update its position in the lastIndex array:
      For 2 at index 0:
      Update lastIndex[2] = 0.
      
      For 7 at index 1:
      Update lastIndex[7] = 1.
      
      For 3 at index 2:
      Update lastIndex[3] = 2.
      
      For 6 at index 3:
      Update lastIndex[6] = 3.
    
    Final lastIndex array:
    [-1, -1, 0, 2, -1, -1, 3, 1, -1, -1]
    
    This means:
    2 was last seen at index 0.
    7 was last seen at index 1.
    3 was last seen at index 2.
    6 was last seen at index 3.

--------------------------------------------------------
-> for (let i = 0; i < digits.length; i++) {
    lastIndex[digits[i]] = i;
}

Execution:
1. Iteration 1 (i = 0):
    Current digit: digits[0] = 2.
    Update lastIndex[2] = 0.
    lastIndex becomes:
    [-1, -1, 0, -1, -1, -1, -1, -1, -1, -1].
2. Iteration 2 (i = 1):
    Current digit: digits[1] = 7.
    Update lastIndex[7] = 1.
    lastIndex becomes:
    [-1, -1, 0, -1, -1, -1, -1, 1, -1, -1].
3. Iteration 3 (i = 2):
    Current digit: digits[2] = 3.
    Update lastIndex[3] = 2.
    lastIndex becomes:
    [-1, -1, 0, 2, -1, -1, -1, 1, -1, -1].
4. Iteration 4 (i = 3):
    Current digit: digits[3] = 6.
    Update lastIndex[6] = 3.
    lastIndex becomes:
    [-1, -1, 0, 2, -1, -1, 3, 1, -1, -1].

Final State of lastIndex:
[-1, -1, 0, 2, -1, -1, 3, 1, -1, -1]

This means:
2 was last seen at index 0.
7 was last seen at index 1.
3 was last seen at index 2.
6 was last seen at index 3.
Digits like 0, 1, 4, 5, 8, 9 were not seen, so their values remain -1.
---------------------------------------------------------
Time Complexity:-
Space Complexity:-

**/
