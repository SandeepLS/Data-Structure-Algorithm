/**
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
*/
Ex:-     A  l        r
sorted: -4 -1 -1 0 1 2
formula:A+l+r
step1:- -4 + -1 + 2 <0  :l++
        -4 + -1 + 2 <0  :l++
        -4 +  0 + 2 <0  :l++
        -4 +  1 + 2 <0  :l++

step2:- 
            A  l     r
sorted: -4 -1 -1 0 1 2
formula:A+l+r
step2:- -1 + -1 + 2 == 0 Ans
        -1 +  0 + 2  > 0  :r--
        -1 +  0 + 1 == 0 Ans

var threeSum = function(nums) {
    nums.sort((a,b) => a-b);
    const res = [];
    for(let i=0;i<nums.length;i++){
        if(i>0 && nums[i] == nums[i-1]){
            continue;
        }
        let l=i+1;
        let r=nums.length-1;
        while(l<r){
            const sum = nums[i] + nums[l] + nums[r];
            if(sum > 0){
                r--;
            }
            if(sum < 0){
                l++;
            }
            if(sum === 0){
                res.push([nums[i],nums[l],nums[r]])
                l++;
                while(nums[l] == nums[l-1] && l<r){
                    l++;
                }
            }
        }
    }
    return res;
};
